---
import config from "@/config";
import { plainify } from "@/lib/textConverter";
import "@/styles/global.css";
import { ClientRouter } from "astro:transitions";

import "@fontsource-variable/inter";
import interWoff2 from "@fontsource-variable/inter/files/inter-latin-wght-normal.woff2?url";
import "@fontsource-variable/jetbrains-mono";
import jetbrainsMonoWoff2 from "@fontsource-variable/jetbrains-mono/files/jetbrains-mono-latin-wght-normal.woff2?url";
import "@fontsource/iansui";
import iansuiWoff2 from "@fontsource/iansui/files/iansui-latin-400-normal.woff2?url";
import "@fontsource/huninn";
import huninnWoff2 from "@fontsource/huninn/files/huninn-latin-400-normal.woff2?url";

interface Props {
  title: string;
  description: string;
  image?: string;
  noindex?: boolean;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site);

const { title, description, image, noindex } = Astro.props;
const plainifyTitle = plainify(title);
const plainifyDescription = plainify(description);
---

<!-- Global Metadata -->
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />

<link rel="icon" type="image/x-icon" href={config.site.favicon} />
<link
  rel="icon"
  type="image/svg+xml"
  href={config.site.favicon_dark}
  media="(prefers-color-scheme: dark)"
/>
<link
  rel="icon"
  type="image/svg+xml"
  href={config.site.favicon}
  media="(prefers-color-scheme: light)"
/>

<meta name="generator" content={Astro.generator} />

<meta name="author" content={config.metadata.meta_author} />

<!-- Font preloads -->
<!-- Font preloads -->
<link rel="preload" href={interWoff2} as="font" type="font/woff2" crossorigin />
<link
  rel="preload"
  href={jetbrainsMonoWoff2}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={iansuiWoff2}
  as="font"
  type="font/woff2"
  crossorigin
/>
<link
  rel="preload"
  href={huninnWoff2}
  as="font"
  type="font/woff2"
  crossorigin
/>

<!-- Canonical URL -->
<link rel="canonical" href={canonicalURL} />

<!-- Primary Meta Tags -->
<title>{plainifyTitle}</title>
<meta name="title" content={plainifyTitle} />
<meta name="description" content={plainifyDescription} />

{noindex && <meta name="robots" content="noindex,nofollow" />}

<!-- Open Graph / Facebook -->
<meta property="og:type" content="website" />
<meta property="og:url" content={Astro.url} />
<meta property="og:title" content={plainifyTitle} />
<meta property="og:description" content={plainifyDescription} />
<meta property="og:image" content={image} />

<!-- Twitter -->
<meta property="twitter:card" content="summary_large_image" />
<meta property="twitter:url" content={Astro.url} />
<meta property="twitter:title" content={plainifyTitle} />
<meta property="twitter:description" content={plainifyDescription} />
<meta property="twitter:image" content={image} />

<!-- rss -->
<link
  rel="alternate"
  type="application/rss+xml"
  title={config.site.title}
  href={new URL("rss.xml", Astro.site)}
/>
<!-- sitemap -->
<link rel="sitemap" href={new URL("sitemap-index.xml", Astro.site)} />

<ClientRouter />

<script>
  import type { TransitionBeforeSwapEvent } from "astro:transitions/client";
  document.addEventListener("astro:before-swap", (e) =>
    [
      ...(e as TransitionBeforeSwapEvent).newDocument.head.querySelectorAll(
        'link[as="font"]'
      ),
    ].forEach((link) => link.remove())
  );
</script>

<script is:inline>
  function init() {
    preloadTheme();
    preloadFont();
    onScroll();
    animate();

    document.addEventListener("scroll", onScroll);
  }

  function animate() {
    const animateElements = document.querySelectorAll(".animate");

    animateElements.forEach((element, index) => {
      setTimeout(() => {
        element.classList.add("show");
      }, index * 150);
    });
  }

  function onScroll() {
    if (window.scrollY > 0) {
      document.documentElement.classList.add("scrolled");
    } else {
      document.documentElement.classList.remove("scrolled");
    }
  }

  function toggleTheme(dark) {
    const css = document.createElement("style");

    css.appendChild(
      document.createTextNode(
        `* {
             -webkit-transition: none !important;
             -moz-transition: none !important;
             -o-transition: none !important;
             -ms-transition: none !important;
             transition: none !important;
          }
        `
      )
    );

    document.head.appendChild(css);

    if (dark) {
      document.documentElement.classList.add("dark");
    } else {
      document.documentElement.classList.remove("dark");
    }

    window.getComputedStyle(css).opacity;
    document.head.removeChild(css);
  }

  function preloadTheme() {
    const userTheme = localStorage.getItem("theme");

    if (userTheme === "light" || userTheme === "dark") {
      toggleTheme(userTheme === "dark");
    } else {
      toggleTheme(window.matchMedia("(prefers-color-scheme: dark)").matches);
    }
  }

  function toggleFont(font) {
    if (font === "iansui") {
      document.documentElement.classList.remove("huninn");
    } else {
      document.documentElement.classList.add("huninn");
    }
  }

  function preloadFont() {
    const userFont = localStorage.getItem("font");
    if (userFont) {
      toggleFont(userFont);
    }
  }

  document.addEventListener("DOMContentLoaded", () => init());
  document.addEventListener("astro:after-swap", () => init());
  preloadTheme();
  preloadFont();
</script>
